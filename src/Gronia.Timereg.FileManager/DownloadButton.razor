@using System.IO
@inject FileManager FileManager

<button @attributes="@InputAttributes" @onclick="@BeginDownload">
    @ChildContent
</button>

@code {
    [Parameter]
    public byte[]? Data { get; set; }

    [Parameter]
    public Func<Task<Stream>>? DataFactory { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? InputAttributes { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string FileName { get; set; } = "file";

    [Parameter]
    public string MimeType { get; set; } = "plain/text";

    protected override void OnParametersSet()
    {
        if(Data is null && DataFactory is null)
        {
            throw new ArgumentNullException(nameof(Data), $"{nameof(Data)} or {nameof(DataFactory)} must be set");
        }
    }

    protected async Task BeginDownload()
    {
        byte[] data;
        if(Data is not null)
        {
            data = Data;
        }
        else
        {
            using var stream = await DataFactory!.Invoke();
            using var reader = new MemoryStream();
            await stream.CopyToAsync(reader);
            reader.Seek(0, SeekOrigin.Begin);
            data = reader.ToArray();
        }
        await FileManager.DownloadFile(data, FileName, MimeType);
    }
}