@using Gronea.Timereg.Application
@using Gronea.Timereg.Domain
@using Gronea.Timereg.Client.ViewModels
@using Gronea.Timereg.Infrastructure
@using Gronea.Timereg.Client.Extensions;
@using Gronea.Timereg.Client.Components;

@page "/"
@inject RouteService Routes
@inject ITimeRegistrationRepository Repo
@inject IStringLocalizer<Home> Localizer


<div class="ml-4">
    <h3 class="text-xl">@Localizer["Grouping"]</h3>
    <div class="mt-2">
        <label htmlFor="week" class="inline-flex items-center">
            <input class="form-radio" id="week" name="group" type="radio" value="week" checked="" />
            <span class="ml-2">@Localizer["Week"]</span>
        </label>
        <label htmlFor="month" class="inline-flex items-center ml-6">
            <input class="form-radio" id="month" name="group" type="radio" value="month" checked="" />
            <span class="ml-2">@Localizer["Month"]</span>
        </label>
    </div>
</div>
@foreach (var group in registrations.GroupBy(x => x.Date.Month).OrderByDescending(x => x.Key))
{
    <div class="flex flex-col mt-2 -mb-2">
        <div class="flex flex-row mt-2">
            <div class="flex w-full items-center justify-between px-8 py-6 bg-indigo-900">
                <div class="flex flex-col ml-6">
                    <h3 class="text-lg font-bold text-teal-500">@Localizer["Week or month of {0}", group.Key]</h3>
                    <div class="mt-4 flex">
                        @foreach (var icon in GetGroupIcons(group))
                        {
                            <Icon Model="icon" />
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <List Items="CreateDayList(group)" />
}


@code{

    private IEnumerable<TimeRegistrationViewModel> registrations = Enumerable.Empty<TimeRegistrationViewModel>();
    protected override async Task OnInitializedAsync()
    {
        registrations = (await Repo.GetAllRegistrationAsync()).Select(x => new TimeRegistrationViewModel(x));
    }

    protected IEnumerable<ListItemViewModel> CreateDayList(IGrouping<int, TimeRegistrationViewModel> group)
    {
        return group
            .GroupBy(x => x.Date)
            .Select(x => new ListItemViewModel(x.Key.ToString("D"), new IconViewModel[]
                {
                    new IconViewModel(x.Sum(x => x.Time).ToString(), ViewModels.Icon.Time, Localizer["Hours"]),
                    new IconViewModel(x.Count().ToString(), ViewModels.Icon.Number, Localizer["Registration count"])
                    }, Routes.GetDayRoute(x.Key.Date)));
    }

    protected IEnumerable<IconViewModel> GetGroupIcons(IGrouping<int, TimeRegistrationViewModel> group)
    {
        yield return new IconViewModel(group.Sum(x => x.Time).ToString(), ViewModels.Icon.Time, Localizer["Total Time"]);
        yield return new IconViewModel(group.Count().ToString(), ViewModels.Icon.Number, Localizer["Registration count"]);
    }
}