@using Gronia.Timereg.Application
@using Gronia.Timereg.Client.ViewModels
@using Microsoft.Extensions.Logging

@page "/edit/{id:guid?}"

@inject ITimeRegistrationRepository Repo
@inject ILogger<Edit> Logger
@inject NavigationManager NavManger
@inject RouteService Routes
@inject IStringLocalizer<Edit> Localizer


<h1 class="text-3xl font-bold pt-2 px-4">@GetTitle()</h1>

<div class="pt-4 px-2">
    @if (_timeRegistration is null)
    {
        <p>@Localizer["Loading"]</p>
    }
    else
    {
        <div class="bg-gray-900 bg-opacity-50 rounded-lg">
            <EditForm Model="@_timeRegistration" OnValidSubmit="SubmitForm" class="mx-8 my-6 py-6">
                <FluentValidationValidator />
                
                <div class="mb-5">
                    <label class="block uppercase tracking-wide text-sm mb-2" htmlFor="date">@Localizer["Date"]</label>
                    <InputDate @bind-Value="@_timeRegistration.Date" DisplayName="@Localizer["Date"]"
                               class="shadow bg-gray-800 border-gray-600 appearance-none border rounded w-full py-2 px-3 text-gray-400 leading-tight focus:outline-none focus:shadow-outline" />
                    <ValidationMessage For="() => _timeRegistration.Date"></ValidationMessage>
                </div>
                <div class="mb-5">
                    <label class="block uppercase tracking-wide text-sm mb-2" htmlFor="project">@Localizer["Project"]</label>
                    <InputText @bind-Value="@_timeRegistration.Project" DisplayName="@Localizer["Project"]"
                               class="shadow bg-gray-800 border-gray-600 appearance-none border rounded w-full py-2 px-3 text-gray-400 leading-tight focus:outline-none focus:shadow-outline" />
                    <ValidationMessage For="() => _timeRegistration.Project"></ValidationMessage>
                </div>
                <div class="mb-5">
                    <label class="block uppercase tracking-wide text-sm mb-2" htmlFor="description">@Localizer["Description"]</label>
                    <InputTextArea @bind-Value="@_timeRegistration.Description" DisplayName="@Localizer["Description"]"
                                   class="shadow bg-gray-800 border-gray-600 appearance-none border rounded w-full py-2 px-3 text-gray-400 leading-tight focus:outline-none focus:shadow-outline" />
                    <ValidationMessage For="() => _timeRegistration.Description"></ValidationMessage>
                </div>
                <div class="mb-5">
                    <label class="block uppercase tracking-wide text-sm mb-2" htmlFor="time">@Localizer["Time"]</label>
                    <InputTime @bind-Value="@_timeRegistration.Time"  DisplayName="@Localizer["Time"]"
                               class="shadow bg-gray-800 border-gray-600 border appearance-none rounded w-full py-2 px-3 text-gray-400 leading-tight focus:outline-none focus:shadow-outline" />
                    <ValidationMessage For="() => _timeRegistration.Time"></ValidationMessage>
                </div>

                <div class="mb-5">
                    <label class="block uppercase tracking-wide text-sm mb-2" htmlFor="time">@Localizer["Time From"]</label>
                    <InputTime @bind-Value="@_timeRegistration.StartTime" DisplayName="@Localizer["Time From"]"
                               class="shadow bg-gray-800 border-gray-600 border appearance-none rounded w-full py-2 px-3 text-gray-400 leading-tight focus:outline-none focus:shadow-outline" />
                    <ValidationMessage For="() => _timeRegistration.StartTime"></ValidationMessage>
                </div>

                <div class="mb-5">
                    <label class="block uppercase tracking-wide text-sm mb-2" htmlFor="time">@Localizer["Time To"]</label>
                    <InputTime @bind-Value="@_timeRegistration.StopTime" DisplayName="@Localizer["Time To"]"
                               class="shadow bg-gray-800 border-gray-600 border appearance-none rounded w-full py-2 px-3 text-gray-400 leading-tight focus:outline-none focus:shadow-outline" />
                    <ValidationMessage For="() => _timeRegistration.StopTime"></ValidationMessage>
                </div>

                <div class="grid grid-cols-6 gap-4 mt-2">
                    <button class="lg:col-start-2 lg:col-span-2 col-span-3 shadow bg-green-700 hover:bg-green-600 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded"
                            type="submit">
                        @Localizer["Save"]
                    </button>
                    @if (Id.HasValue)
                    {
                        <button class="lg:col-end-6 lg:col-span-2 col-span-3 shadow bg-red-700 hover:bg-red-500 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded"
                                type="button"
                                @onclick="Delete">
                            @Localizer["Delete"]
                        </button>
                    }
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    private TimeRegistrationViewModel? _timeRegistration;

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var registration = await Repo.GetRegistrationAsync(Id.Value);
            if (registration is null)
            {
                Logger.LogError("Unable to find registration with id {id}", Id);
                NavManger.NavigateTo(Routes.GetHomeRoute());
                return;
            }
            _timeRegistration = new TimeRegistrationViewModel(registration);
        }
        else
        {
            _timeRegistration = new TimeRegistrationViewModel
            {
                Date = DateTimeOffset.UtcNow.Date
            };
        }
    }

    protected async Task SubmitForm()
    {
        Logger.LogInformation("Submitting {registration} with {id}", _timeRegistration, Id);
        if (Id.HasValue)
        {
            await Repo.UpdateRegistrationAsync(Id.Value, _timeRegistration!.ToDomainModel());
        }
        else
        {
            await Repo.CreateRegistrationAsync(_timeRegistration!.ToDomainModel());
        }

        NavManger.NavigateTo(Routes.GetHomeRoute());
    }

    protected async Task Delete()
    {
        Logger.LogInformation("Deleting {registration} with id: {id}", _timeRegistration, Id);
        if (!Id.HasValue)
        {
            Logger.LogWarning("Attempted to delete registration without Id");
        }
        else
        {
            await Repo.DeleteRegistrationAsync(Id.Value);
        }
        NavManger.NavigateTo(Routes.GetHomeRoute());
    }

    protected string GetTitle()
    {
        if (!string.IsNullOrWhiteSpace(_timeRegistration?.Description))
        {
            return _timeRegistration.Description;
        }
        if (!string.IsNullOrWhiteSpace(_timeRegistration?.Project))
        {
            return _timeRegistration.Project;
        }
        
        return string.Empty;
    }
}
